(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b6abd"],{"1dc7":function(t,i,e){"use strict";e.r(i);var g=function(){var t=this,i=t.$createElement;t._self._c;return t._m(0)},o=[function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("div",[e("p",[t._v("设置用户名: git config --global user.name 'styleNB'")]),e("p",[t._v("设置邮箱: git config --global user.emali 'yujiaming139147@vip.qq.com'")]),e("p",[t._v("初始化文件: git init")]),e("p",[t._v("查看状态： git status")]),e("p",[t._v("添加暂存区： git add aa.html")]),e("p",[t._v("提交： git commit -m '这里写描述'")]),e("p",[t._v("删除： git rm aa.html")]),e("p",[t._v("查看初始化信息： git config --list")]),e("p",[t._v("复制项目： git clone 粘贴")]),e("p",[t._v("将本地的仓库关联到github上： git remote add origin git@github com:leiphp/awesome-python3-webapp.git")]),e("p",[t._v("上传到git仓库上： git push")]),e("p",[t._v("styleNB.github.io 个人主页")]),e("p",[t._v("git checkout -b develop 创建并新建分支")]),e("span",[t._v("第一种如上图中的提示：git push --set-upstream origin master。其中的origin是你在clone远程代码时，git为你创建的指向这个远程代码库的标签，它指向repository。为了能清楚了解你要指向的repository，可以用命令git remote -v进行查看。master是你远程的branch，可以用git branch -a查看所有分支，远程分支是红色的部分。然后确定好这两个值后，将值换掉即可。 另一种方法是：git push -u origin master。同样根据自己的需要，替换origin和master。")]),e("span",[t._v("两个命令的区别是第一条命令是要保证你的远程分支存在，如果不存在，也就无法进行关联。而第二条指令即使远程没有你要关联的分支，它也会自动创建一个出来，以实现关联。")]),e("p",[t._v("1.首先切换到分支； git checkout hellomonkey 2.使用git pull 把分支代码pull下来； git pull 3.切换到主分支； git checkout master 4.把分支的代码merge到主分支； git merge hellomonkey 5.git push推上去ok完成,现在 你自己分支的代码就合并到主分支上了。 git push 总结：同样的道理，主分支的文件也可以合并的分支上。 ^o^")])])}],p={},n=p,a=e("5d22"),r=Object(a["a"])(n,g,o,!1,null,"bffa6c6e",null);i["default"]=r.exports}}]);
//# sourceMappingURL=chunk-2d0b6abd.35431d8f.js.map